openapi: 3.0.0
info:
  title: Experimentation as a Service API Specification
  version: "1.0.0"
  description: |
    The Experimentation as a Service (EaaS) API Specification defines the APIs for onboarding applications and experiments, managing the experiment lifecycle, and the APIs exposed by the southbound plugin.
      - Application Package Management Interface:
         - Create Application Package Info
         - Upload Application Package
         - Fetch Application Package Info
         - Fetch Application Package Artifact
      - Experiment Descriptor Management Interface:
         - Create Experiment Descriptor Info
         - Upload Experiment Descriptor Archive
      - Experiment Lifecycle Management Interface:
         - Create Experiment Identifier
         - Instantiate Experiment
servers:
  - url: "{apiRoot}/eaas-application-repository/api/v1"
    variables:
      apiRoot:
        default: http://localhost:8080
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
  - url: "{apiRoot}/eaas-experimentation-descriptor-manager/v0.1"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
  - url: "{apiRoot}/eaas-experimentation-lifecycle-manager/v0.1"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
  

tags:
  - name: EaaS Application Repository
    description: Upload/Fetch Application data
  - name: EaaS Experimentation Description Manager
    description: Upload/Fetch Experiment data
  - name: EaaS Experimentation Lifecycle Manager
    description: Manage the lifecycle of an experiment
  - name: Southbound Plugin
    description: Site adataper service

paths:
  # Application Package Management Interface
  /app_packages:
    get:
      tags: 
        - EaaS Application Repository
      summary: Query Application packages information.
      description: |
        Creates a new Application Package Info resource.
        According to ETSI NFV-SOL 005, the request payload is minimal and includes only userDefinedData.
      parameters:
      - in: query
        name: showPublic
        schema:
          type: boolean
        description: Returns also public applications (default false)
      responses:
        '200':
          description: Application Package Info created successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppPkgInfo'
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags: 
        - EaaS Application Repository
      summary: Create Application Package Info
      description: |
        Creates a new Application Package Info resource.
        According to ETSI NFV-SOL 005, the request payload is minimal and includes only userDefinedData.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppPkgInfoRequest'
      responses:
        '201':
          description: Application Package Info created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppPkgInfo'
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
                
  /app_packages/{appPkgId}:
    get:
      tags: 
        - EaaS Application Repository
      summary: Fetch Application Package Info
      description: Retrieves information about a specific Application package.
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application Package Info retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppPkgInfo'
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags: 
        - EaaS Application Repository
      summary: Delete Application Package Info
      description: Retrieves information about a specific Application package.
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application Package Info retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppPkgInfo'
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
                
  /app_packages/{appPkgId}/package_content:
    put:
      tags: 
        - EaaS Application Repository
      summary: Upload Application Package
      description: Uploads the Application package content (e.g. binary archive).
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        '202':
          description: Application package upload accepted.
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /app_packages/{appPkgId}/app_descriptor:
    get:
      tags: 
        - EaaS Application Repository
      summary: Read Application Descriptor of an on-boarded Application package.
      description: The GET method reads the content of the Application Descriptor within a Application package.
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shall be returned when the content of the Application Descriptor has been read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDescriptor'
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
                
  /app_packages/{appPkgId}/manifest:
    get:
      tags: 
        - EaaS Application Repository
      summary: Read the manifest of an on-boarded Application package
      description: The GET method reads the content of the manifest within a Application package.
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shall be returned when the content of the manifest has been read successfully.
          content:
            application/text:
              schema:
                type: string
                format: string
  /app_packages/{appPkgId}/artifacts/{artifactPath}:
    get:
      tags: 
        - EaaS Application Repository
      summary: Fetch Application Package Artifact
      description: Retrieves a specific artifact from a Application package.
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
        - name: artifactPath
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Artifact fetched successfully.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
                
  /app_packages/{appPkgId}/ws:
    get:
      tags: 
        - EaaS Application Repository
      summary: Listen to app package update events
      description: Open a WebSocket to retrieve application update events (AppPkgEvent).
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '101':
          description: Switching Protocol.
        '4XX':
            description: 400 family error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
                
  /app_packages/{appPkgId}/usage/{requestId}:
    put:
      tags: 
        - EaaS Application Repository
      summary: Request to use the AppPkgId
      description: The request ID will be associated with the app package ID, and the app package’s packageUsageState will be set to IN_USE
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content.
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags: 
        - EaaS Application Repository
      summary: Delete a previous usage request
      description: The request ID will no longer be associated with the app package ID. If there are no other requests on the package, the packageUsageState will be set to NOT_IN_USE.
      parameters:
        - name: appPkgId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content.
        '4XX':
          description: 400 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'





  # Experiment Descriptor Management Interface
  /experiment_descriptors:
    post:
      tags: 
        - EaaS Experimentation Description Manager
      summary: Create Experiment Descriptor Info
      description: |
        Creates a new Experiment Descriptor Info resource.
        The payload follows ETSI guidelines and uses a minimal model with userDefinedData.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExperimentDescriptorInfoRequest'
      responses:
        '201':
          description: Experiment Descriptor Info created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentDescriptorInfo'
  /experiment_descriptors/{experimentDescriptorId}:
    get:
      tags: 
        - EaaS Experimentation Description Manager
      summary: Read information about an individual Experiment descriptor resource.
      description: The GET method reads information about an individual Experiment descriptor.
      parameters:
        - name: experimentDescriptorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shall be returned when information about the individual Experiment descriptor has been read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentDescriptorInfo'
  /experiment_descriptors/{experimentDescriptorId}/experimentDescriptor_archive_content:
    put:
      tags: 
        - EaaS Experimentation Description Manager
      summary: Upload Experiment Descriptor Archive
      description: Uploads the Experiment Descriptor archive content.
      parameters:
        - name: experimentDescriptorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        '202':
          description: Experiment Descriptor archive upload accepted.

  # Experiment Lifecycle Management Interface
  /experiment_instances:
    post:
      tags: 
        - EaaS Experimentation Lifecycle Manager
      summary: Create Experiment Identifier
      description: |
        The POST method creates a new Experiment instance resource.
      requestBody:
        description: The Experiment creation parameters.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExperimentRequest'
      responses:
        '201':
          description: >
            Shall be returned when a new "Individual Experiment instance" 
            resource and the associated Experiment instance identifier 
            has been created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentInstance'
  /experiment_instances/{experimentInstanceId}/instantiate:
    post:
      tags: 
        - EaaS Experimentation Lifecycle Manager
      summary: Instantiate Experiment
      description: Initiates the instantiation of an Experiment instance.
      parameters:
        - name: experimentInstanceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantiateExperimentRequest'
      responses:
        '202':
          description: Experiment instantiation initiated.
  
  /experiment_instances/{experimentInstanceId}/terminate:
    post:
      tags: 
        - EaaS Experimentation Lifecycle Manager
      summary: Terminate Experiment
      description: Initiates the termination of an Experiment instance.
      parameters:
        - name: experimentInstanceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminateExperimentRequest'
      responses:
        '202':
          description: Experiment termination initiated.

  /application_onboarding:
    post:
      tags: 
        - Southbound Plugin
      summary: Onboard the application
      description: It will call the underlying Site APIs to onboard the application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppPkgInfo'
      responses:
        '201':
          description: Application onboarding accepted.
          content:
            application/text:
              schema:
                type: string
                description: Application onboarding id
  
  
  /create_application_instance:
    post:
      tags: 
        - Southbound Plugin
      summary: Create (and start) an application's instance
      description: It will call the underlying Site APIs to start the given instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstanceApplicationRequest'
      responses:
        '201':
          description: Experiment's instance operation starting accepted.
          content:
            application/text:
              schema:
                type: string
                description: Application instance id

  /stop_application_instance:
    post:
      tags: 
        - Southbound Plugin
      summary: Stop an application's instance
      description: It will call the underlying Site APIs to stop the given instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopInstanceApplicationRequest'
      responses:
        '202':
          description: Experiment's instance operation stopping accepted.
  /{instanceId}/state/ws:
    get:
      tags: 
        - Southbound Plugin
      summary: Listen to instance state events
      description: Open a WebSocket to retrieve the instance state (string).
      parameters:
        - name: instanceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '101':
          description: Switching Protocol.
        '4XX':
            description: 400 family error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ProblemDetails'
        '5XX':
          description: 500 family error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          
components:
  schemas:
    AppPkgEvent:
      type: object
      description: Application Package Event
      properties:
        AppPkgId:
          type: string
          description: the id this event is referring to
        EventType:
          type: string
          description: event type
          enum:
            - CREATED
            - UPDATED
            - DELETED
        EventVersion:
          type: integer
          description: version of this event
        Timestamp:
          type: integer
          description: Unix time
        Payload:
          description: Event payload
          type: object
          properties:
            AppPkg:
              $ref: "#/components/schemas/AppPkgInfo"
      required:
        - AppPkgId
        - EventType
        - EventVersion
        - Timestamp
  
    CreateInstanceApplicationRequest:
      type: object
      description: Data Structure for request a creation of a Application Instance
      properties:
        appOnboardingId:
          type: string
          description: Identifier of the onboarding of this Application package. This identifier is allocated by the Southbound Plugin.
        additionalParams:
          type: object
          description: Additional Params to pass
          additionalProperties: true
      required:
        - appOnboardingId
    StopInstanceApplicationRequest:
      type: object
      description: Data Structure for request a stop of a Application Instance
      properties:
        appInstanceId:
          type: string
          description: Identifier of the instance of the Application. This identifier is allocated by the Southbound Plugin.
      required:
        - appInstanceId
  
    ProblemDetails:
      type: object
      description: Data structure from IETF RFC 7807
      properties:
        type:
          type: string
          description: >
            A URI reference according to IETF RFC 3986 [3] that identifies
            the problem type. It is encouraged that the URI provides
            human-readable documentation for the problem (e.g. using
            HTML) when dereferenced. When this member is not present,
            its value is assumed to be "about:blank".
        title:
          type: string
          description: >
            A short, human-readable summary of the problem type. It should
            not change from occurrence to occurrence of the problem,
            except for purposes of localization. If type is given and other
            than "about:blank", this attribute shall also be provided.
        status:
          type: integer
          description: The HTTP status code for this occurrence of the problem.
          example: 403
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may yield further information if dereferenced.
        additionalAttribute:
          type: object
          description: Any number of additional attributes, as defined in a specification or by an implementation.
          additionalProperties: true
      required:
        - status
        - detail
    Link:
      type: object
      description: This type represents a link to a resource using an absolute URI.
      properties:
        href:
          type: string
          description: >
            URI of another resource referenced from a resource. 
            Shall be an absolute URI (i.e. a URI that contains {apiRoot}).
            A string formatted according to IETF RFC 3986
      required:
        - href
    Checksum:
      type: object
      description: This type represents the checksum of a package or an artifact file.
      properties:
        algorithm:
          type: string
          description: >
            Name of the algorithm used to generate the checksum. The name 
            matching when processing the attribute value shall be case-insensitive, 
            for example, "SHA-256" or "sha-256", "SHA-512" or "sha-512"
          example: SHA-256
        hash:
          type: string
          description: The hexadecimal value of the checksum.
      required:
        - algorithm
        - hash
    AppPackageSoftwareImageInfo:
      type: object
      description: This type represents an artifact contained in or external to a Application package which represents a software image.
      properties:
        id:
          type: string
          description: Identifier of the software image. (should match the id in the appDescriptor)
        name:
          type: string
          description: Name of the software image.
        provider:
          type: string
          description: Provider of the software image.
        version:
          type: string
          pattern: "^\\d+(?:\\.\\d+){0,2}$"
          description: Version of the software image.
          example: 0.1
        checksum:
          $ref: '#/components/schemas/Checksum'
        isEncrypted:
          type: boolean
          description: > 
            Reflects whether the image is encrypte (true) or not (false).
      required:
        - id   
        - name
        - provider
        - version
        - checksum
        - isEncrypted
    AppPackageArtifactInfo:
      type: object
      description: This type represents an artifact other than a software image which is contained in or external to a Application package.
      properties:
        artifactPath:
          type: string
          description: >
            Path which identifies the artifact and also allows to access a copy of the artifact. For an artifact contained as a file in the Application package,
            this attribute shall be present, and the value of this attribute shall start with the name of the first segment in the path in the package, 
            i.e. it shall not be prefixed by path separator characters such as "." and "/".ù
          example: foo/bar/m@ster.sh
        artifactURI:
          type: string
          description: URI of the artifact as defined in the Application package manifest. Shall be present if the artifact is external to the package and shall be absent otherwise.
          example: https://example.com/m%40ster.sh
        checksum:
          $ref: '#/components/schemas/Checksum'
        isEncrypted:
          type: boolean
          description: > 
            Reflects whether the image is encrypte (true) or not (false).
    # Application Package Management Models
    CreateAppPkgInfoRequest:
      type: object
      description: Request payload for creating Application Package Info (minimal ETSI model).
      properties:
        userDefinedData:
          type: object
          description: User defined data for the Application package.
          additionalProperties: true

    AppPkgInfo:
      type: object
      description: Representation of a Application Package Info resource.
      properties:
        id:
          type: string
          description: Identifier of the Application package. This identifier is allocated by the EaaS Application Repository.
          example: c10407ac-31f3-4ee9-a51a-ba1171cd4ca1
        _onboardingId:
          type: string
          description: Identifier of the onboarding of this Application package. This identifier is allocated by the Southbound Plugin. It shall be present after the Application package content has been on-boarded and absent otherwise.
          example: c10407ac-31f3-4ee9-a51a-ba1171cd4ca1
        appDescriptorId:
          type: string
          description: This identifier, which is managed by the Application provider, identifies the Application package and the Application Descriptor in a globally unique way. It is copied from the Application Descriptor of the on-boarded Application package. It shall be present after the Application package content has been on-boarded and absent otherwise.
          example: 664bf8e3-8a01-4b33-b69a-65cc0799d30b
        appDescriptorExtInvariantId:
          type: string
          description: >
            Identifies a Application Descriptor in a version independent manner. This attribute is invariant across versions of the Application Descriptor that fulfil certain conditions related to the external connectivity and management of the Application. 
            It shall be present after the Application package content has been on- boarded if it is included in the Application Descriptor and shall be absent otherwise. If present it is copied from the Application Descriptor of the on-boarded Application package.
          example: 664bf8e3-8a01-4b33-b69a-65cc0799d30b
        appProvider: 
          type: string
          description: Provider of the Application package and the Application Descriptor. This information is copied from the Application Descriptor. It shall be present after the Application package content has been on-boarded and absent otherwise.
          example: ExampleProvider
        appProductName:
          type: string
          description: Name to identify the Application product. Invariant for the Application product lifetime. This information is copied from the Application Descriptor. It shall be present after the Application package content has been on-boarded and absent otherwise.
          example: busybox by ExampleProvider
        appSoftwareVersion:
          type: string
          pattern: "^\\d+(?:\\.\\d+){0,2}$"
          description: Software version of the Application. This is changed when there is any change to the software included in the Application package. This information is copied from the Application Descriptor. It shall be present after the Application package content has been on-boarded and absent otherwise.
          example: "1.2"
        appDescriptorVersion:
          type: string
          pattern: "^\\d+(?:\\.\\d+){0,2}$"
          description: The version of the Application Descriptor. This information is copied from the Application Descriptor. It shall be present after the Application package content has been on-boarded and absent otherwise.
          example: "1.2"
        packageOnboardingState:
          type: string
          description: >
            Indicates the current onboarding state of the Application package.
            Typical values include:
              - CREATED: The package has been created but not yet on-boarded.
              - ONBOARDED: The package has been successfully on-boarded.
              - ERROR: An error occurred during the on-boarding process.
          enum:
            - CREATED
            - UPLOADING
            - PROCESSING
            - ONBOARDED
            - ERROR
        packageOperationalState:
          type: string
          description: >
            Indicates the operational state of the Application package.
            Typical values include:
              - ENABLED: The package is operational.
              - DISABLED: The package is not operational.
          enum:
            - ENABLED
            - DISABLED
        packageUsageState:
          type: string
          description: >
            Indicates whether the Application package is in use.
            Typical values include:
              - NOT_IN_USE: The package is not currently being used.
              - IN_USE: The package is in active use.
          enum:
            - NOT_IN_USE
            - IN_USE
        softwareImages:
          type: array
          description: >
            Information about Application package artifacts that are software images. Every local and external software image referenced from the Application Descriptor shall be included.
            No other artifacts shall be included. This attribute shall not be present before the Application package content is on-boarded. Otherwise, this attribute shall 
            be present unless it has been requested to be excluded per attribute selector.
          items:
            $ref: '#/components/schemas/AppPackageSoftwareImageInfo'
        additionalArtifacts:
          type: array
          description: >
            Information about Application package artifacts contained in the Application package that are not software images. Every local and external artifact declared in the 
            manifest shall be included, except the software images and the files that make up the parts of the Application Descriptor (see clause 9.4.4.3.2). Signature files and certificate files are not 
            considered as artifacts, however, the content of the "Licenses" and "Testing" directories in the Application package is.
            This attribute shall not be present before the Application package content is on-boarded. Otherwise, this attribute shall be present if the Application package contains additional artifacts.
          items:
            $ref: '#/components/schemas/AppPackageArtifactInfo'
        appmInfo:
          type: array
          description: >
            Specifies Application Managers compatible with the Application. This information is copied from the Application Descriptor of the on-boarded Application package.
            It shall be present after the Application package content has been on-boarded and absent otherwise.
          items:
            type: string
        userDefinedData:
          type: object
          description: Optional container for additional, user-defined attributes or metadata.
          additionalProperties: true
      required:
        - id

    # Experiment Descriptor Management Models
    CreateExperimentDescriptorInfoRequest:
      type: object
      description: Request payload for creating Experiment Descriptor Info (minimal ETSI model).
      properties:
        userDefinedData:
          type: object
          description: Arbitrary user-defined data.
          additionalProperties: true
      required:
        - userDefinedData
    ExperimentDescriptorInfo:
      type: object
      description: This type represents a response for the query Experiment Descriptor operation.
      properties:
        id:
          type: string
          description: Identifier of the onboarded individual Experiment descriptor resource.
        experimentDescriptorId:
          type: string
          description: >
            This identifier, which is allocated by the Experiment Descriptor
            designer, identifies the Experiment Descriptor in a globally unique way.
            It is copied from the Experiment Descriptor content and shall be present after the Experiment Descriptor content is on-boarded.
        experimentDescriptorExtInvariantId:
          type: string
          description: >
            Identifies an Experiment Descriptor in a version independent manner.
            This attribute is invariant across versions of the Experiment Descriptor
            that fulfil certain conditions related to the external
            connectivity and management of the Experiment. It shall be
            present after the Experiment Descriptor content has been on-boarded if
            it is included in the Experiment Descriptor and shall be absent 
            otherwise. If present it is copied from the Experiment Descriptor of the 
            on-boarded content.
        experimentDescriptorName:
          type: string
          description: >
            Name of the onboarded Experiment Descriptor. This information is 
            copied from the Experiment Descriptor content and shall be present
            after the Experiment Descriptor content is on-boarded.
        experimentDescriptorVersion:
          type: string
          description: >
            Version of the on-boarded Experiment Descriptor. This information is 
            copied from the Experiment Descriptor content and shall be present 
            after the Experiment Descriptor content is on-boarded.
        experimentDescriptorDesigner:
          type: string
          description: >
            Designer of the on-boarded Experiment Descriptor. This information is 
            copied from the Experiment Descriptor content and shall be present
            after the Experiment Descriptor content is on-boarded
        experimentDescriptorInvariantId:
          type: string
          description: >
            This identifier, which is allocated by the Experiment Descriptor designer, 
            identifies an Experiment Descriptor in a version independent
            manner. This attribute is invariant across versions of
            Experiment Descriptor with no constraint on the changes across
            versions. This information is copied from the Experiment Descriptor of
            the on-boarded content and shall be present after the
            Experiment Descriptor content is on-boarded.
        appPkgIds:
          type: array
          description: >
            Identifies the Application package for the Application Descriptor referenced by the on-boarded Experiment descriptor resource.
          items:
            type: string
        onboardingFailureDetails:
          $ref: '#/components/schemas/ProblemDetails'
        experimentDescriptorOnboardingState:
          type: string
          description: Onboarding state of the individual Experiment descriptor resource.
          enum:
            - CREATED
            - UPLOADING
            - PROCESSING
            - ONBOARDED
            - ERROR
        experimentDescriptorOperationalState:
          type: string
          description: Operational state of the individual Experiment descriptor resource.
          enum:
            - ENABLED
            - DISABLED
        experimentDescriptorUsageState:
          type: string
          description: Usage state of the individual Experiment descriptor resource.
          enum:
            - IN_USE
            - NOT_IN_USE
        userDefinedData:
          type: object
          description: Experiment-specific user-defined data.
          additionalProperties: true
      required:
        - id
        - experimentDescriptorOnboardingState
        - experimentDescriptorOperationalState
        - experimentDescriptorUsageState
    

    # Experiment Lifecycle Management Models
    CreateExperimentRequest:
      type: object
      description: The Experiment creation parameters.
      properties:
        experimentDescriptorId:
          type: string
          description: Identifier of the Experiment Descriptor that defines the Experiment instance to be created.
        experimentName:
          type: string
          description: Human-readable name of the Experiment instance to be created.
        experimentDescription:
          type: string
          description: Human-readable description of the Experiment instance to be created.
      required:
        - experimentDescriptorId
        - experimentName
        - experimentDescription

    ExperimentInstance:
      type: object
      description: This type represents an Experiment instance
      properties:
        id:
          type: string
          description: Identifier of the Experiment instance
        experimentInstanceName:
          type: string
          description: Human readable name of the Experiment instance.
        experimentDescriptorId:
          type: string
          description: > 
            Identifier of the Experiment Descriptor on which the Experiment instance is based.
        experimentDescriptorInfoId:
          type: string
          description: >
            Identifier of the Experiment Descriptor information object on which the Experiment instance is based. This
            identifier has been allocated by the EaaS Lifecycle Manager.
        flavourId:
          type: string
          description: >
            Identifier of the Experiment deployment flavour applied to the Experiment instance. This attribute shall be present 
            if the experimentState attribute value is INSTANTIATED.
        appInstance:
          type: array
          description: Information on constituent Application(s) of the Experiment instance.
          items:
            $ref: '#/components/schemas/AppInstance'
        experimentState:
          type: string
          description: >
            The instantiation state of the Experiment.
            Permitted values:
              - NOT_INSTANTIATED: The Experiment instance is terminated or not instantiated.
              - INSTANTIATED: The Experiment instance is instantiated.
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
      required:
        - id
        - experimentInstanceName
        - experimentDescriptorId
        - experimentDescriptorInfoId
        - experimentState
      
    AppInstance:
      type: object
      description: This type represents an Application instance
      properties:
        id:
          type: string
          description: Identifier of the Application instance
        appInstanceName:
          type: string
          description: > 
            Human readable name of the Application instance.
            Modifications to this attribute can be requested using the "ModifyAppInfoData" structure.
        appInstanceDescription:
          type: string
          description: >
            Human-readable description of the Application instance.
            Modifications to this attribute can be requested using the "ModifyAppInfoData" structure.
        appDescriptorId:
          type: string
          description: > 
            Identifier of the Application Descriptor on which the Application instance is based.
        appProvider:
          type: string
          description: > 
            Provider of the Application and the Application Descriptor.
            The value is copied from the Application Descriptor.
        appProductName:
          type: string
          description: > 
            Name to identify the Application Product.
            The value is copied from the Application Descriptor.
        appSoftwareVersion:
          type: string
          description: > 
            Software version of the Application.
            The value is copied from the Application Descriptor.
        appVersion:
          type: string
          description: > 
            Identifies the version of the Application Descriptor.
            The value is copied from the Application Descriptor.
        appPkgId:
          type: string
          description: >
            Identifier of information held by the NFVO about the specific Application package 
            on which the Application is based. This identifier has been allocated by the Eaas Application Repository.
        appConfigurableProperties:
          type: object
          description: >
            Additional Application-specific attributes that provide the current values of the configurable properties of the Application instance.
            These attributes represent values that are stored persistently in the AppInstance structure and that correspond to configuration parameters of the
            Application instance. Modifying these attributes affects the configuration of the Application instance either directly 
            (if the Application instance is in INSTANTIATED state at the time of the modification) or as part of the subsequent Application instantiation 
            operation (if the Application instance is in NOT_INSTANTIATED state at the time of the modification).
          additionalProperties: true
        instantiationState:
          type: string
          description: >
            The instantiation state of the Application.
            Permitted values:
              - NOT_INSTANTIATED: The Application instance is terminated or not instantiated.
              - INSTANTIATED: The Application instance is instantiated.
          enum:
            - NOT_INSTANTIATED
            - INSTANTIATED
      required:
        - id
        - appDescriptorId
        - appProvider
        - appProductName
        - appSoftwareVersion
        - appVersion
        - appPkgId
        - instantiationState
    
    LocationConstraints:
      type: object
      description: >
        This type represents location constraints for a Application to be instantiated. The location constraints can be represented as follows:
        - as a country code;
        - as a civic address combined with a country code;
        - as an area, conditionally combined with a country code.
      properties:
        countryCode:
          type: string
          description: >
            The two-letter ISO 3166 [13] country code in capital letters. Shall be present in case the "area" attribute is
            absent. May be absent if the "area" attribute is present.
        civicAddressElement:
          type: array
          description: Zero or more elements comprising the civic address. Shall be absent if the "area" attribute is present.
          items:
            type: object
            properties:
              caType:
                type: integer
                description: Describe the content type of caValue. The value of caType shall comply with section 3.4 of IETF RFC 4776
              caValue:
                type: string
                description: Content of civic address element corresponding to the caType. The format caValue shall comply with section 3.4 of IETF RFC 4776
            required:
              - caType
              - caValue
        area:
          type: string
          description: >
            Geographic area. Shall be absent if the "civicAddressElement" attribute is present. The content of
            this attribute shall follow the provisions for the "Polygon" geometry object as defined in IETF RFC 7946 [20], for
            which the "type" member shall be set to the value "Polygon".

    AppLocationConstraint:
      type: object
      description: >
        This type represents the association of location constraints to a Application instance 
        to be created according to a specific Application profile
      properties:
        appProfileId:
          type: string
          description: Identifier (reference to) of a AppProfile in the Experiment used to manage the lifecycle of the Application instance.
        locationConstraint:
          $ref: '#/components/schemas/LocationConstraints'
      required:
        - appProfileId
        - locationConstraint

    ParamsForApp:
      type: object
      description: This type defines the additional parameters for the Application instance to be created associated with an Experiment instance.
      properties:
        appProfileId:
          type: string
          description: Identifier of the AppProfile applicable to the Application instance to which the additional parameters apply.
        appInstanceName:
          type: string
          description: Human-readable name of the Application instance to be created.
        appInstanceDescription:
          type: string
          description: Human-readable description of the Application instance to be created.
        appConfigurableProperties:
          type: object
          description: >
            If present, this attribute provides values for the configurable properties declared in the Application Descriptor. These
            values will override the default values if default values are also declared in the Application Descriptor.
            It provides values for the "appConfigurableProperties" input parameter of the Instantiate Application operation.
          additionalProperties: true
        metadata:
          type: object
          description: >
            If present, this attribute provides values for metadata Metadata can but need not be declared in the Application Descriptor.
            These values will override the default values if default values are also declared in the Application Descriptor
          additionalProperties: true
        additionalParams:
          type: object
          description: >
            Additional input parameters for the instantiation process, specific to the Application being instantiated, as declared in the
            Application Descriptor as part of "InstantiateAppOpConfig"
          additionalProperties: true
      required:
        - appProfileId

    
    InstantiateExperimentRequest:
      type: object
      description: This type represents request parameters for the "Instantiate Experiment" operation.
      properties:
        experimentFlavourId:
          type: string
          description: Identifier of the Experiment deployment flavour to be instantiated.
        locationConstraints:
          type: array
          description: >
            Defines the location constraints for the Application to be instantiated as part of the Experiment instantiation.
            An example can be a constraint for the Application to be in a specific geographic location.
          items:
            $ref: '#/components/schemas/AppLocationConstraint'
        additionalParamsForExperiment:
          type: object
          description: >
            Allows to provide additional parameter(s) at the composite Experiment level (as opposed to the Application level, which
            is covered in additionalParamsForApp), and as opposed to the nested Experiment level, which is covered in additionalParamsForNestedExperiment.
          additionalProperties: true
        additionalParamsForApp:
          type: array
          description: >
            Allows to provide additional parameter(s) per Application instance (as opposed to the composite Experiment level, which 
            is covered in additionalParamsForExperiment), and as opposed to the nested Experiment level, which is covered in 
            additionalParamsForNestedExperiment). This is for Applications that are to be created by the Orchestrator as part of the Experiment 
            instantiation and not for existing Application that are referenced for reuse.
          items:
            $ref: '#/components/schemas/ParamsForApp'
        experimentInstantiationLevelId:
          type: string
          description: Identifies one of the Experiment instantiation levels declared in the DF applicable to this Experiment instance.
      required:
        - experimentFlavourId

    TerminateAppData:
      type: object
      description: This type represents the information to terminate a Application that is part of an Experiment.
      properties:
        appInstanceId:
          type: string
          description: Identifies the Application instance, part of the Experiment, to be terminated.
        terminationType:
          type: string
          description: Indicates whether forceful or graceful termination is requested.
          enum:
            - FORCEFUL
            - GRACEFUL
        gracefulTerminationTimeout:
          type: integer
          description: >
            The attribute is only applicable in case of graceful termination. It defines the time to wait for the Application to be taken out of service 
            before shutting down the Application and releasing the resources. The unit is seconds.
        additionalParams:
          type: object
          description: >
            Additional parameters passed by the OSS/BSS as input to the termination process, specific to the VNF being terminated.
            (e.g. input parameters to Application-specific termination procedures.)
      required:
        - appInstanceId

    TerminateExperimentRequest:
      type: object
      description: This type represents request parameters for the \"Terminate Experiment\" operation
      properties:
        terminationExperimentData:
          type: object
          description: Provides additional parameters to the termination process at the Experiment level
          properties:
            additionalParamsForExperiment:
              type: object
              description: Allows to provide additional parameter(s) to the termination process at the Experiment level.
              additionalProperties: true
        terminationAppData:
          type: array
          description: Provides the information to terminate Application instance(s).
          items:
            $ref: '#/components/schemas/TerminateAppData'

## Custom model
    SwImageDesc:
      type: object
      properties:
        id:
          description: The identifier of this software image.
          type: string
        name:
          type: string
          description: The name of this software image.
        version:
          type: string
          description: The version of this software image.
        checksum:
          $ref: '#/components/schemas/Checksum'
        swImage:
          type: string
          description: >
            This is a reference to the actual software root of the Application Package or can be a URL.
        supportedVirtualisationEnviroment:
          type: array
          description: Specifies the virtualisation environments (e.g. hypervisor) compatible with this software image.
          items:
            type: string
      required:
        - id
        - name
        - version
        - swImage
      
    VDU:
      type: object
      properties:
        vduId:
          type: string
          description: Unique identifier of this Vdu in Application Descriptor.
        name:
          type: string
          description: Human readable name of the Vdu.
        description:
          type: string
          description: Human readable description of the Vdu.
        mcioIdentificationData:
          type: string
          description: >
            Name and type of the MCIO that realizes this VDU. It allows the Application Manager to identify the MCIO e.g. when querying the CISM.
            It shall be present when the VDU is realized by one or a set of OS containers and shall be absent otherwise.
        osContainerDesc:
          type: array
          description: >
            Describes CPU, memory requirements and limits, and software images of the OS Containers realizing this Vdu
            corresponding to OS Containers sharing the same host and same network namespace. Each unique identifier is
            referenced only once within one VDU.
          items:
            $ref: '#/components/schemas/OsContainerDesc'
        swImageDesc:
          $ref: '#/components/schemas/SwImageDesc'
        virtualComputeDesc:
          $ref: '#/components/schemas/VirtualComputeDesc'

      required:
        - vduId
        - name
        - description

    LogicalNodeRequirements:
      type: object
      description: >
        This information element describes compute, memory and I/O requirements that are to be associated with the logical
        node of infrastructure. The logical node requirements are a sub-component of the VDU level requirements.
      properties:
        id:
          type: string
          description: Identifies this set of logical node requirements.
        logicalNodeRequirementDetail:
          type: array
          description: >
            The logical node-level compute, memory and I/O requirements. An array of key-value pairs that articulate the deployment requirements.
          minItems: 1
          items:
            type: object
            description: >
              This could include the number of CPU cores on this logical node, a memory configuration specific to a logical node
              (e.g. such as available in the Linux kernel via the libnuma library) or a requirement related to the association 
              of an I/O device with the logical node.
            additionalProperties: true
      required:
        - id
        - logicalNodeRequirementDetail

    RequestedAdditionalCapabilityData:
      type: object
      description: This information element describes requested additional capability for a particular VDU. Such a capability may be for acceleration or specific tasks.
      properties:
        requestedAdditionalCapability:
          type: string
          description: Specifies a requested additional capability for the VDU.
        supportMandatory:
          type: boolean
          description: Indicates whether the requested additional capability is mandatory for successful operation.
        minRequestedAdditionalCapabilityVersion:
          type: string
          description: Specifies the minimum version of the requested additional capability.
        preferredRequestedAdditionalCapabilityVersion:
          type: string
          description: Specifies the preferred version of the requested additional capability.
        targetPerformanceParameters:
          type: object
          description: Specifies specific attributes, dependent on the requested additional capability type.
          minProperties: 1
          additionalProperties: true
      required:
        - requestedAdditionalCapability
        - supportMandatory
        - targetPerformanceParameters

    VirtualCpuPinningData:
      type: object
      description: >
        The VirtualCpuPinningData information element supports the specification of requirements related to the virtual CPU
        pinning configuration of a virtual compute resource.
      properties:
        virtualCpuPinningPolicy:
          type: string
          description: >
            Indicates the policy for CPU pinning. VALUES:
            - STATIC
            - DYNAMIC
            In case of "STATIC" the virtual CPU cores are requested to be allocated to logical CPU cores
            according to the rules defined in virtualCpuPinningRules. In case of "DYNAMIC" the allocation of virtual
            CPU cores to logical CPU cores is decided by the VIM or CISM (e.g. SMT (Simultaneous Multi-Threading) requirements).
          enum:
            - STATIC
            - DYNAMIC
        virtualCpuPinningRule:
          type: array
          description: >
            List of rules that should be considered during the allocation of the virtual CPUs to logical CPUs in case of "STATIC" virtualCpuPinningPolicy.
          items: {}

    VirtualCpuData:
      type: object
      description: The VirtualCpuData information element supports the specification of requirements related to virtual CPU(s) of a virtual compute resource.
      properties:
        cpuArchitecture:
          type: string
          description: >
            CPU architecture type. Examples are x86, ARM. The cardinality can be 0 during the allocation request, 
            if no particular CPU architecture type is requested.
        numVirtualCpu:
          type: integer
          description: Number of virtual CPUs.
        virtualCpuClock:
          type: number
          description: Minimum virtual CPU clock rate (e.g. in MHz). The cardinality can be 0 during the allocation request, if no particular value is requested.
        numVirtualCpuValidValues:
          type: object
          description: >
            Indicates valid values for the number of virtual CPUs. If this attribute is present, the number of virtual CPUs can be indicated in a Application LCM
            operation. If no value is indicated in the Application LCM operation, the virtual compute resource is instantiated with the value 
            indicated in the numVirtualCpu attribute. If this attribute is not present, the number of virtual CPUs is not configurable via the
            Application LCM interface and is always equal to the value indicated in the numVirtualCpu attribute.
          additionalProperties: true
        virtualCpuOversubscriptionPolicy:
          type: object
          description: >
            The CPU core oversubscription policy e.g. the relation of virtual CPU cores to physical CPU cores/threads. The cardinality 
            can be 0 during the allocation request, if no particular value is requested
          additionalProperties: true
        vduCpuRequirements:
          type: array
          description: Array of key-value pair requirements on the Compute (CPU) for the VDU.
          items: {}
        virtualCpuPinning:
          $ref: '#/components/schemas/VirtualCpuPinningData'
            
      required:
        - numVirtualCpu
    
    VirtualMemoryData:
      type: object
      description: The virtual memory of the virtualised compute.
      properties:
        virtualMemSize:
          type: number
          description: Amount of virtual Memory (e.g. in MB).
        virtualMemSizeValidValues:
          type: object
          description: >
            Indicates valid values for the amount of virtual memory. If this attribute is present, the amount of virtual memory can be indicated in a
            Application LCM operation. If no value is indicated in the Application LCM operation, the virtual compute resource is instantiated with the 
            value indicated in the virtualMemSize attribute.
            If this attribute is not present, the amount of virtual memory is not configurable via the Application LCM interface and is always equal to 
            the value indicated in the virtualMemSize attribute.
          additionalProperties: true
        virtualMemOversubscriptionPolicy:
          type: object
          description: >
            The memory core oversubscription policy in terms of virtual memory to physical memory on the platform. The cardinality can be 
            during the allocation request, if no particular value is requested.
          additionalProperties: true
        vduMemRequirements:
          type: array
          description: Array of key-value pair requirements on the memory for the VDU.
          items: {}
        numaEnabled:
          type: boolean
          description: >
            It specifies the memory allocation to be cognisant of the relevant process/core allocation. The cardinality can be during
            the allocation request, if no particular value is requested.
        hugePagesRequirements:
          type: object
          description: Specifies requirements on the huge pages resources for the virtual memory.
          additionalProperties: true
        hugePagesRequirementsValidValues:
          type: object
          description: >
            Indicates, for page sizes indicated in the hugePagesRequirements attribute, the valid values of the aggregated size.
            If this attribute is present for a particular page size, the aggregated memory amount for that page size can be indicated in a 
            Application LCM operation. If no value is indicated in the Application LCM operation, the aggregated memory amount for that page size is set to
            the value indicated in hugePagesRequirements attribute.
          additionalProperties: true
      required:
        - virtualMemSize

    BlockStorageData:
      type: object
      description: The BlockStorageData information element specifies the details of block storage resource.
      properties:
        sizeOfStorage:
          type: number
          description: Size of virtualised storage resource in GB.
        sizeOfStorageValidValues:
          type: object
          description: > 
            Indicates valid values for the size of the virtualised storage resource.
            If this attribute is present, the size of the virtualised storage resource can be indicated in a Application LCM operation. 
            If no value is indicated in the Application LCM operation, the block storage resource is instantiated with the value indicated in the
            sizeOfStorage attribute. If this attribute is not present, the size of the virtualised storage resource is not
            configurable via the Application LCM interface and is always equal to the value indicated in the sizeOfStorage attribute.
          additionalProperties: true
        vduStorageRequirements:
          type: array
          description: An array of key-value pairs that articulate the storage deployment requirements.
          items: {}
        rdmaEnabled:
          type: boolean
          description: Indicate if the storage support RDMA.
        swImageDesc:
          $ref: '#/components/schemas/SwImageDesc'
      required:
        - sizeOfStorage
        
    VirtualComputeDesc:
      type: object
      description: The VirtualComputeDesc information element supports the specification of requirements related to virtual compute resource
      properties:
        virtualComputeDescId:
          type: string
          description: Unique identifier of this VirtualComputeDesc in the Application Descriptor.
        logicalNode:
          type: array
          description: The logical node requirements.
          items:
            $ref: '#/components/schemas/LogicalNodeRequirements'
        requestAdditionalCapabilities:
          type: array
          description: >
            Specifies requirements for additional capabilities. These may be for a range of purposes. One example is acceleration related capabilities.
          items:
            $ref: '#/components/schemas/RequestedAdditionalCapabilityData'
        computeRequirements:
          type: array
          description: Specifies compute requirements.
          items: {}
        virtualMemory:
          $ref: '#/components/schemas/VirtualMemoryData'
        virtualCpu:
          $ref: '#/components/schemas/VirtualCpuData'
        virtualDisk:
          type: array
          description: The local or ephemeral disk(s) of the virtualised compute.
          items:
            $ref: '#/components/schemas/BlockStorageData'
      required:
        - virtualComputeDescId
        - virtualMemory
        - virtualCpu

    MonitoringParameter:
      type: object
      description: >
        This information element specifies the virtualised resource related performance metrics and fault to be tracked by the
        Application Manager, e.g. for auto-scaling, auto-healing, Application fault management or Application performance management purposes. The
        Application Manager collects the values of performance metrics identified by this information element from the VIM(s), PaaS Service
        or external monitoring tool using one or more locally initiated PM Jobs. These values can be used as inputs to
        auto-scaling rules
      properties:
        monitoringParameterId:
          type: string
          description: Unique identifier of the monitoring parameter.
        name:
          type: string
          description: Human readable name of the monitoring parameter.
        performanceMetric:
          type: string
          description: Specifies the virtualised resource performance metric.
        collectionPeriod:
          type: object
          description: An attribute that describes the periodicity at which to collect the performance information.
          additionalProperties: true
        monitoringType:
          type: array
          description: array of monitoringType Enums (VIM_CISM, EXTERNAL, PAAS)
          items:
            type: string
            description: >
              Supported types of monitoring way. VALUES:
              - VIM_CISM
              - EXTERNAL
              - PAAS
              If no value is specified, the default value is "VIM_CISM".
            enum:
              - VIM_CISM
              - EXTERNAL
              - PAAS
      required:
        - monitoringParameterId
        - performanceMetric

    OsContainerDesc:
      type: object
      properties:
        osContainerDescId:
          type: string
          description: Unique identifier of this OsContainerDesc in the Application Descriptor.
        name:
          type: string
          description: Human readable name of this OS container.
        description:
          type: string
          description: Human readable description of this OS container.
        requestedCpuResources:
          type: integer
          description: Number of CPU resources requested for the container (e.g. in milli-CPU-s).
        requestedCpuValidValues:
          type: object
          description: >
            Indicates valid values for the number of CPU resources requested for the container (e.g. in milli-CPU-s).
            If this attribute is present, the number of CPU resources requested for the container can be indicated in a Application LCM operation. If no value
            is indicated in the Application LCM operation, the set of co-located container compute resources is instantiated with the value indicated in the
            requestedCpuResources attribute. If this attribute is not present, the number of CPU resources requested for the container is
            not configurable via the Application LCM interface and it is set to the value indicated in the requestedCpuResources attribute if this
            attribute is present.
          additionalProperties: true
        requestedMemoryResource:
          type: number
          description: Amount of memory resources requested for the container (e.g. in MB).
        requestedMemoryResourcesValidValues:
          type: object
          description: >
            Indicates valid values for the amount of memory resources requested for the container (e.g. in MB). If this attribute is present, the amount of
            memory resources requested for the container can be indicated in a Application LCM operation. If no value is indicated in the Application LCM operation, the set of co-located
            container compute resources is instantiated with the value indicated in the requestedMemoryResources attribute. If this attribute is not present, the amount of
            memory resources requested for the container is not configurable via the Application LCM interface and it is set to the value indicated in the requestedMemoryResources attribute if
            this attribute is present.
          additionalProperties: true
        requestedEphemeralStorageResources:
          type: number
          description: Size of ephemeral storage resources requested for the container (e.g. in GB).
        requestedEphemeralStorageResourcesValidValues:
          type: object
          description: >
            Indicates valid values for the size of ephemeral storage resources requested for the container (e.g. in GB). If this attribute is present, the amount of
            ephemeral storage resources requested for the container can be indicated in a Application LCM operation. If no value is indicated in the Application LCM operation, the set of co-located
            container compute resources is instantiated with the value indicated in the requestedEphemeralStorageResources attribute.
            If this attribute is not present, the amount of ephemeral storage resources requested for the container is not configurable via the Application LCM interface and it is set to the value
            indicated in the requestedEphemeralStorageResources attribute if this attribute is present.
          additionalProperties: true
        extendedResourceRequests:
          type: array
          description: An array of key-value pairs of extended resources required by the container.
          items: {}
        extendedResourceRequestsValidValues:
          type: array
          description: >
            For each of the extended resources indicated in the extendedResourceRequests attribute indicates the valid amount values.
            If this attribute is present for a particular extended resource, the amount of that extended resource requested for the
            container can be indicated in a Application LCM operation. If no value is indicated in the Application LCM operation, the set of co-located
            container compute resources is instantiated with the value indicated in the extendedResourceRequests attribute.
            If this attribute is not present for a particular extended resource, the amount of that extended resource requested for the
            container is not configurable via the Application LCM interface and is always equal to the value indicated in the extendedResourceRequests attribute.
          items: {}
        cpuResourceLimit:
          type: integer
          description: Number of CPU resources the container can maximally use (e.g. in milli-CPU).
        cpuResourceLimitValidValues:
          type: object
          description: Same as requestedCpuResourcesValidValues, but it will apply to cpuResourceLimit.
          additionalProperties: true
        memoryResourceLimit:
          type: number
          description: Amount of memory resources requested for the container (e.g. in MB).
        memoryResourceLimitValidValues:
          type: object
          description: Same as requestedMemoryResourcesValidValues, but it will apply to memoryResourceLimit.
          additionalProperties: true
        ephemeralStorageResourceLimit:
          type: number
          description: Size of ephemeral storage resources the container can maximally use (e.g. in GB).
        ephemeralStorageResourceLimitValidValues:
          type: object
          description: Same as requestedEphemeralStorageResourcesValidValues, but it will apply to ephemeralStorageResourceLimit.
          additionalProperties: true
        hugePageResources:
          type: object
          description: > 
            Specifies HugePages resources requested for the container, which the container can maximally use (e.g. "hugepages-2Mi: 100Mi").
        hugePageResourcesValidValues:
          type: object
          description: >
            Indicates, for page sizes indicated in the hugePageResources attribute, the valid values of the aggregated size that the 
            container can maximally use. If this attribute is present for a particular page size, the aggregated memory amount that the
            container can maximally use for that page size can be indicated in a Application LCM operation. If no value is indicated in the Application LCM operation, 
            the set of co-located container compute resources is instantiated allowing the container to maximally use the value indicated in hugePageResources attribute.
            If this attribute is not present for a particular page size, the aggregated memory amount that the container can maximally use for that 
            page size is not configurable via the Application LCM interface and is always equal to the value indicated in the hugePageResources attribute.
          additionalProperties: true
        cpuPinningRequirements:
          $ref: '#/components/schemas/VirtualCpuPinningData'
        swImageDesc:
          $ref: '#/components/schemas/SwImageDesc'
        bootData:
          type: object
          description: > 
            Contains a string or a URL to a file contained in the Application package used to customize a container resource at boot time. The bootData
            may contain variable parts that are replaced by deployment specific values before being sent.
          additionalProperties: true
        monitoringParameters:
          type: array
          description: Specifies the virtualised resource related performance metrics on the OsContainerDesc level to be tracked by the Application Manager.
          items:
            $ref: '#/components/schemas/MonitoringParameter'
      required:
        - osContainerDescId
        - name
        - description
        - swImageDesc
    
    DeploymentFlavour:  # (DF)
      type: object
      properties:
        flavourId:
          type: string
          description: Identifier of this DF within the Application Descriptor.
        description:
          type: string
          description: Human readable description of the DF.
        vduProfile:
          type: array
          description: Describes additional instantiation data for the VDUs used in this flavour.
          minItems: 1
          items:
            $ref: '#/components/schemas/VduProfile'
        istantiationLevel:
          type: array
          description: >
            Describes the various levels of resources that can be used to instantiate the Application using this flavour. Examples: Small, Medium, Large.
            If there is only one "instantiationLevel" entry, it shall be treated as the default instantiation level for this DF.
          minItems: 1
          items:
            $ref: '#/components/schemas/IstantiationLevel'
        appLcmOperationsConfiguration:
          $ref: '#/components/schemas/AppLcmOperationsConfiguration'
        mciopProfile:
          type: array
          description: >
            Describes additional instantiation data for the MCIOPs used in this deployment flavour. This attribute shall be present if the 
            DF references (via the vduProfile) containerized workloads based on a MCIOP.
          items:
            $ref: '#/components/schemas/MciopProfile'
      required:
        - flavourId
    
    VduProfile:
      type: object
      description: The VduProfile information element describes additional instantiation data for a given VDU used in a DF.
      properties:
        vduId:
          type: string
          description: Uniquely references a VDU.
        minNumberOfInstances:
          type: integer
          description: >
            Minimum number of instances of the Application Component based on this VDU that is permitted to exist for this flavour. Shall be zero or greater.
          minimum: 0
        maxNumberOfInstances:
          type: integer
          description: >
            Maximum number of instances of the Application Component based on this VDU that is permitted to exist for this flavour. Shall be greater than zero.
          minimum: 1
      required:
        - vduId
        - minNumberOfInstances
        - maxNumberOfInstances
    
    IstantiationLevel:
      type: object
      description: >
        The InstantiationLevel information element describes a given level of resources to be instantiated within a DF in term
        of the number of Application Component instances to be created from each VDU, the number of VIP CP instances and/or bit rate requirements.
      properties:
        levelId:
          type: string
          description: Uniquely identifies a level within the DF.
        description:
          type: string
          description: Human readable description of the level.
        vduLevel:
          type: array
          description: Indicates the number of instances of this VDU to deploy for this level.
          minItems: 1
          items:
            $ref: '#/components/schemas/VduLevel'
      required:
        - levelId
        - description
        - vduLevel

    VduLevel:
      type: object
      description: The VduLevel information element indicates for a given VDU in a given level the number of instances to deploy.
      properties:
        vduId:
          type: string
          description: Uniquely references a VDU.
        numberOfInstances:
          type: integer
          description: Number of instances of Application Component based on this VDU to deploy for an instantiation level or for a scaling delta. Shall be zero or greater.
          minimum: 0
      required:
        - vduId
        - numberOfInstances

    AppLcmOperationsConfiguration:
      type: object
      description: > 
        This information element is a container for all attributes that affect the invocation of the Application Lifecycle Management operations, structured by operation.
      properties:
        instantiateAppOpConfig:
          $ref: '#/components/schemas/InstantiateAppOpConfig'

    InstantiateAppOpConfig:
      type: object
      description: This information element defines attributes that affect the invocation of the InstantiateApp operation.
      properties:
        parameter:
          type: array
          description: Array of KVP requirements for Application-specific parameters to be passed when invoking the InstantiateApp operation.
          items: {}
        targetScaleLevelsSupported:
          type: boolean
          description: >
            Signals whether target scale levels are supported by this Application during instantiation. Default is FALSE, i.e. "not supported".

    MciopProfile:
      type: object
      description: >
        A Managed Container Infrastructure Object Package (MCIOP) is a hierarchical aggregate of information objects for OS
        container management and orchestration. Multiple MCIOPs can be included in a Application Package. The MciopProfile
        information element provides properties of the MCIOP which are used during deployment of containerized workloads 
        based on a MCIOP, associated to a Application deployment flavour.
      properties:
        mciopId:
          type: string
          description: Identifies the MCIOP in the Application package.
        associatedVdu:
          type: array
          description: >
            List of VDUs which are associated to this MCIOP and which are deployed using this MCIOP. If the referenced VDUs belong to
            a deployable module, all the referenced VDUs shall belong to that deployable module
          items:
            type: string
      required:
        - mciopId


    AppExtCpd:
      type: object
      description: >
        A AppExtCpd is a type of Cpd and describes an external interface, also known as external CP, exposed by this Application enabling connection with a VL.
      properties:
        virtualCpd:
          type: string
          description: > 
            References the Virtual CPD which is used VirtualCpd) to describe a virtual connection point allowing to access a set of Application Component 
            instances (based on their respective VDUs).
      required:
        - virtualCpd

    VirtualCpd:
      type: object
      description: >
        A VirtualCpd is a type of Cpd and describes a requirement to create a virtual connection point allowing the access to a 
        number of Application Component instances (based on their respective VDUs).
      properties:
        cpdId:
          type: string
          description: Identifier of this Cpd information element.
        layerProtocol:
          type: array
          description: Specifies which protocol the CP uses for connectivity purposes.
          minItems: 1
          items:
            type: string
            description: >
              VALUES:
              - Ethernet
              - MPLS
              - ODU2
              - IPV4
              - IPV6
              - Pseudo-Wire
              - others
            enum:
              - Ethernet
              - MPLS
              - ODU2
              - IPV4
              - IPV6
              - Pseudo-Wire
              - others
        description:
          type: string
          description: Provides human-readable information on the purpose of the CP (e.g. CP for control plane traffic).
        vdu:
          type: array
          description: References the VDU(s) which implement this service.
          minItems: 1
          items:
            type: string
        additionalServiceData:
          type: array
          description: Additional service identification data of the VirtualCp exposed to NFV-MANO.
          items:
            $ref: '#/components/schemas/AdditionalServiceData'
      required:
        - cpdId
        - layerProtocol
        - vdu
        
    AdditionalServiceData:
      type: object
      description: >
        This information element describes the additional service data of the CP used to expose properties of the CP to NFV-MANO.
        If the CP is exposed by a Application component realized by one or a set of OS containers, the properties are mirrored from
        the declarative descriptor of the corresponding MCIO where available.
      properties:
        portData:
          type: array
          description: Service port numbers exposed by the CP.
          minItems: 1
          items:
            $ref: '#/components/schemas/ServicePortData'
        serviceData:
          type: object
          description: Service matching information exposed by the CP.
          additionalProperties: true
      required:
        - portData

    ServicePortData:
      type: object
      description: This information element describes the service identifying port properties exposed by the CP.
      properties:
        name:
          type: string
          description: The name of the port exposed by the CP.
        protocol:
          type: string
          description: >
            The L4 protocol for this port exposed by the CP. VALUES:
            - TCP
            - UDP
            - SCTP
          enum:
            - TCP
            - UDP
            - SCTP
        port:
          type: integer
          description: The L4 port number exposed by the CP.
        portConfigurable:
          type: boolean
          description: Specifies whether the port attribute value is allowed to be configurable.
      required:
        - name
        - protocol
        - port
        - portConfigurable
      
    AppDescriptor:
      type: object
      description: Representation of a Application Descriptor Info resource.
      properties:
        appDescriptorId:
          type: string
          description: >
            Identifier of this Application descriptor information element. This attribute shall be globally unique. The format will be
            defined in the data model specification phase.
        appDescriptorExtInvariantId:
          type: string
          description: >
            Identifies a Application Descriptor in a version independent manner. This attribute is invariant across versions of the Application Descriptor
            that fulfil certain conditions related to the external connectivity and management of the Application.
        appProvider:
          type: string
          description: Provider of the Application and of the Application Descriptor
        appProductName:
          type: string
          description: Name to identify the Application Product. Invariant for the Application Product lifetime.
        appSoftwareVersion:
          type: string
          description: >
            Software version of the Application. This is changed when there is any change to the software that is included in the Application Package.
        appDescriptorVersion:
          type: string
          description: Specifies the version of the Application Descriptor
        appmInfo:
          type: array
          description: Specifies Application M(s) compatible with the Application described in this version of the Application Descriptor.
          items:
            type: string
        swImageDesc:
          type: array
          description: Defines descriptors of software images to be used by the Application.
          items:
            $ref: '#/components/schemas/SwImageDesc'
        vdu:
          type: array
          description: VDUs related to this Application Descriptor.
          items:
            $ref: '#/components/schemas/VDU'
        deploymentFlavour:
          type: array
          description: Describes specific DF(s) of a Application with specific requirements for capacity and performance.
          items:
            $ref: '#/components/schemas/DeploymentFlavour'
        appExtCpd:
          type: array
          description: Describes external interface(s) exposed by this Application enabling connection with a VL.
          items:
            $ref: '#/components/schemas/AppExtCpd'
        virtualCpd:
          type: array
          description: >
            Describes a virtual connection point allowing to access a set of Application Component instances (based on their respective VDUs)
          items:
            $ref: '#/components/schemas/VirtualCpd'
      required:
        - appDescriptorId
        - appDescriptorExtInvariantId
        - appProvider
        - appProductName
        - appSoftwareVersion
        - appDescriptorVersion
    
### Experiment model
    AppProfile:
      type: object
      description: >
        The AppProfile information element specifies a profile for instantiating Applications of a particular Experiment DF according to a specific 
        Application Descriptor and Application DF.
      properties:
        appProfileId:
          type: string
          description: Identifier of this AppProfile information element. It uniquely identifies a AppProfile.
        appDescriptorId:
          type: string
          description: References a Application Descriptor.
        appDescriptorExtInvariantId:
          type: string
          description: >
            Identifies a Application Descriptor in a version independent manner. If present it shall have the same value as the 
            appDescriptorExtInvariantId in the Application Descriptor referenced by the appDescriptorId attribute. It allows for Application instances 
            during Experiment LCM the use of a Application Descriptor different from the one referenced by the appDescriptorId attribute, 
            provided they have the same appDescriptorExtInvariantId.
        flavourId:
          type: string
          description: References a flavour within the Application Descriptor.
        instantiationLevel:
          type: string
          description: Identifier of the instantiation level of the Application DF to be used for instantiation.
        minNumberOfInstances:
          type: integer
          description: > 
            Minimum number of instances of the Application based on this Application Descriptor that is permitted to exist for this AppProfile.
        maxNumberOfInstances:
          type: integer
          description: Maximum number of instances of the Application based on this Application Descriptor that is permitted to exist for this AppProfile.
      required:
        - appProfileId
        - appDescriptorId
        - appDescriptorExtInvariantId
        - flavourId
        - minNumberOfInstances
        - maxNumberOfInstances

    AppToLevelMapping:
      type: object
      description: >
        The AppToLevelMapping information element specifies the profile to be used for a Application involved in a given Experiment level 
        and the required number of instances.
      properties:
        appProfileId:
          type: string
          description: References the profile to be used for a Application involved in an Experiment level.
        numberOfInstances:
          type: integer
          description: Specifies the number of Application instances required for an Experiment level.
      required:
        - appProfileId
        - numberOfInstances

    ExperimentLevel:
      type: object
      description: >
        The ExperimentLevel information element describes the details of an Experiment level. An Experiment level consists of a list of involved
        entities, i.e. Applications, VLs and/or nested Experiments. For each involved Application/nested Experiment, the number of instances required by the
        Experiment level is specified. Experiment levels shall be used in the context of Experiment instantiation and in this case they are 
        referred to as Experiment instantiation levels. Every Application, VL and nested Experiment whose descriptor is referenced by the Experiment DF shall be 
        involved in an Experiment instantiation level of the parent Experiment.
      properties:
        experimentLevelId:
          type: string
          description: Identifier of this ExperimentLevel information element. It uniquely identifies an Experiment level within the DF.
        description:
          type: string
          description: Human readable description of the Experiment level.
        appToLevelMapping:
          type: array
          description: Specifies the profile of the Applications involved in this Experiment level and, for each of them, the required number of instances.
          minItems: 1 # not in the standard
          items:
            $ref: '#/components/schemas/AppToLevelMapping'
      required:
        - experimentLevelId
        - description
        - appToLevelMapping # not in the standard

    ExperimentDf:
      type: object
      description: The ExperimentDf information element specifies the properties of a variant of an Experiment.
      properties:
        experimentDfId:
          type: string
          description: Identifies this ExperimentDf information element. It identifies an Experiment DF within the Experiment Descriptor.
        flavourKey:
          type: string
          description: >
            Assurance parameter against which this flavour is being described. The key can be a combination of multiple assurance parameters with a
            logical relationship between them. The parameters should be present as a monitoredInfo attribute in this ExperimentDf.
        appProfile:
          type: array
          description: Application profile to be used for the Experiment flavour.
          minItems: 1 # not in the standard
          items:
            $ref: '#/components/schemas/AppProfile'
        nsInstantiationLevel:
          type: array
          description: Describes the details of an Experiment level.
          minItems: 1
          items:
            $ref: '#/components/schemas/ExperimentLevel'
      required:
        - experimentDfId
        - flavourKey
        - appProfile
        - nsInstantiationLevel

    SecurityParameters:
      type: object
      description: > 
        The SecurityParameters information element contains the signature of an Experiment Descriptor instance together with 
        information required to validate the signature.
      properties:
        signature:
          type: string
          description: Provides the signature of the signed part of the descriptor.
        algorithm:
          type: string
          description: Specifies the algorithm used to compute the signature.
        certificate:
          type: object
          description: > 
            Provides a certificate or a reference to a certificate to validate the signature.
            Cardinality of 0 corresponds to the case where the certificate is provided by means outside the Experiment Descriptor.
      required:
        - signature
        - algorithm

    ExperimentDescriptor:
      type: object
      description: >
        The Experiment Descriptor information element is a deployment template whose instances are used by the NFVO for 
        the lifecycle management of Experiments.
      properties:
        experimentDescriptorIdentifier:
          type: string
          description: Identifier of this Experiment Descriptor information element. It Globally uniquely identifies an instance of the Experiment Descriptor.
        designer:
          type: string
          description: Specifies the designer of the Experiment Descriptor.
        version:
          type: string
          description: Specifies the version of the Experiment Descriptor.
        experimentDescriptorName:
          type: string
          description: Provides the human readable name of the Experiment Descriptor.
        experimentDescriptorInvariantId:
          type: string
          description: > 
            Identifies an Experiment Descriptor in a version independent manner. This attribute is invariant across versions of Experiment Descriptor with 
            no constraint on the changes across versions.
        experimentDescriptorExtInvariantId:
          type: string
          description: >
            Identifies an Experiment Descriptor in a version independent manner. This attribute is invariant across versions of the Experiment Descriptor
            that fulfil certain conditions related to the external connectivity and management of the Experiment.
        appId:
          type: array
          description: References the Application Descriptor of a constituent Application
          items:
            type: string
            description: reference to appDescriptorId
        experimentDf:
          type: array
          description: Specifies a DF within the scope of an Experiment Descriptor
          minItems: 1
          items:
            $ref: '#/components/schemas/ExperimentDf'
        security:
          $ref: '#/components/schemas/SecurityParameters'
      required:
        - experimentDescriptorIdentifier
        - designer
        - version
        - experimentDescriptorName
        - experimentDescriptorInvariantId
        - experimentDescriptorExtInvariantId
        - experimentDf
        - security
