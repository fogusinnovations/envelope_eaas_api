# generated by fastapi-codegen:
#   filename:  EaaS-openAPI.yaml
#   timestamp: 2025-06-05T07:30:57+00:00

from __future__ import annotations

from typing import List, Optional, Union

from fastapi import FastAPI, Path, Query

from .models import (
    AppDescriptor,
    AppPkgInfo,
    CreateAppPkgInfoRequest,
    CreateExperimentDescriptorInfoRequest,
    CreateExperimentRequest,
    CreateInstanceApplicationRequest,
    ExperimentDescriptorInfo,
    ExperimentInstance,
    InstantiateExperimentRequest,
    ProblemDetails,
    StopInstanceApplicationRequest,
    TerminateExperimentRequest,
)

app = FastAPI(
    title='Experimentation as a Service API Specification',
    version='1.0.0',
    description='The Experimentation as a Service (EaaS) API Specification defines the APIs for onboarding applications and experiments, managing the experiment lifecycle, and the APIs exposed by the southbound plugin.\n  - Application Package Management Interface:\n     - Create Application Package Info\n     - Upload Application Package\n     - Fetch Application Package Info\n     - Fetch Application Package Artifact\n  - Experiment Descriptor Management Interface:\n     - Create Experiment Descriptor Info\n     - Upload Experiment Descriptor Archive\n  - Experiment Lifecycle Management Interface:\n     - Create Experiment Identifier\n     - Instantiate Experiment\n',
    servers=[
        {
            'url': '{apiRoot}/eaas-application-repository/api/v1',
            'variables': {
                'apiRoot': {
                    'default': 'http://localhost:8080',
                    'description': 'API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`',
                }
            },
        },
        {
            'url': '{apiRoot}/eaas-experimentation-descriptor-manager/v0.1',
            'variables': {
                'apiRoot': {
                    'default': 'http://localhost:9091',
                    'description': 'API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`',
                }
            },
        },
        {
            'url': '{apiRoot}/eaas-experimentation-lifecycle-manager/v0.1',
            'variables': {
                'apiRoot': {
                    'default': 'http://localhost:9091',
                    'description': 'API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`',
                }
            },
        },
    ],
)


@app.get(
    '/app_packages',
    response_model=List[AppPkgInfo],
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def get_app_packages(
    show_public: Optional[bool] = Query(None, alias='showPublic')
) -> Union[List[AppPkgInfo], ProblemDetails]:
    """
    Query Application packages information.
    """
    pass


@app.post(
    '/app_packages',
    response_model=None,
    responses={
        '201': {'model': AppPkgInfo},
        '4XX': {'model': ProblemDetails},
        '5XX': {'model': ProblemDetails},
    },
    tags=['EaaS Application Repository'],
)
def post_app_packages(
    body: CreateAppPkgInfoRequest,
) -> Optional[Union[AppPkgInfo, ProblemDetails]]:
    """
    Create Application Package Info
    """
    pass


@app.get(
    '/app_packages/{appPkgId}',
    response_model=AppPkgInfo,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def get_app_packages_app_pkg_id(
    app_pkg_id: str = Path(..., alias='appPkgId')
) -> Union[AppPkgInfo, ProblemDetails]:
    """
    Fetch Application Package Info
    """
    pass


@app.delete(
    '/app_packages/{appPkgId}',
    response_model=AppPkgInfo,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def delete_app_packages_app_pkg_id(
    app_pkg_id: str = Path(..., alias='appPkgId')
) -> Union[AppPkgInfo, ProblemDetails]:
    """
    Delete Application Package Info
    """
    pass


@app.get(
    '/app_packages/{appPkgId}/app_descriptor',
    response_model=AppDescriptor,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def get_app_packages_app_pkg_id_app_descriptor(
    app_pkg_id: str = Path(..., alias='appPkgId')
) -> Union[AppDescriptor, ProblemDetails]:
    """
    Read Application Descriptor of an on-boarded Application package.
    """
    pass


@app.get(
    '/app_packages/{appPkgId}/artifacts/{artifactPath}',
    response_model=bytes,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def get_app_packages_app_pkg_id_artifacts_artifact_path(
    app_pkg_id: str = Path(..., alias='appPkgId'),
    artifact_path: str = Path(..., alias='artifactPath'),
) -> Union[bytes, ProblemDetails]:
    """
    Fetch Application Package Artifact
    """
    pass


@app.get(
    '/app_packages/{appPkgId}/manifest',
    response_model=str,
    tags=['EaaS Application Repository'],
)
def get_app_packages_app_pkg_id_manifest(
    app_pkg_id: str = Path(..., alias='appPkgId')
) -> str:
    """
    Read the manifest of an on-boarded Application package
    """
    pass


@app.put(
    '/app_packages/{appPkgId}/package_content',
    response_model=None,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def put_app_packages_app_pkg_id_package_content(
    app_pkg_id: str = Path(..., alias='appPkgId')
) -> Optional[ProblemDetails]:
    """
    Upload Application Package
    """
    pass


@app.put(
    '/app_packages/{appPkgId}/usage/{requestId}',
    response_model=None,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def put_app_packages_app_pkg_id_usage_request_id(
    app_pkg_id: str = Path(..., alias='appPkgId'),
    request_id: str = Path(..., alias='requestId'),
) -> Optional[ProblemDetails]:
    """
    Request to use the AppPkgId
    """
    pass


@app.delete(
    '/app_packages/{appPkgId}/usage/{requestId}',
    response_model=None,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def delete_app_packages_app_pkg_id_usage_request_id(
    app_pkg_id: str = Path(..., alias='appPkgId'),
    request_id: str = Path(..., alias='requestId'),
) -> Optional[ProblemDetails]:
    """
    Delete a previous usage request
    """
    pass


@app.get(
    '/app_packages/{appPkgId}/ws',
    response_model=None,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['EaaS Application Repository'],
)
def get_app_packages_app_pkg_id_ws(
    app_pkg_id: str = Path(..., alias='appPkgId')
) -> Optional[ProblemDetails]:
    """
    Listen to app package update events
    """
    pass


@app.post(
    '/application_onboarding',
    response_model=None,
    responses={'201': {'model': str}},
    tags=['Southbound Plugin'],
)
def post_application_onboarding(body: AppPkgInfo) -> Optional[str]:
    """
    Onboard the application
    """
    pass


@app.post(
    '/create_application_instance',
    response_model=None,
    responses={'201': {'model': str}},
    tags=['Southbound Plugin'],
)
def post_create_application_instance(
    body: CreateInstanceApplicationRequest,
) -> Optional[str]:
    """
    Create (and start) an application's instance
    """
    pass


@app.post(
    '/experiment_descriptors',
    response_model=None,
    responses={'201': {'model': ExperimentDescriptorInfo}},
    tags=['EaaS Experimentation Description Manager'],
)
def post_experiment_descriptors(
    body: CreateExperimentDescriptorInfoRequest,
) -> Optional[ExperimentDescriptorInfo]:
    """
    Create Experiment Descriptor Info
    """
    pass


@app.get(
    '/experiment_descriptors/{experimentDescriptorId}',
    response_model=ExperimentDescriptorInfo,
    tags=['EaaS Experimentation Description Manager'],
)
def get_experiment_descriptors_experiment_descriptor_id(
    experiment_descriptor_id: str = Path(..., alias='experimentDescriptorId')
) -> ExperimentDescriptorInfo:
    """
    Read information about an individual Experiment descriptor resource.
    """
    pass


@app.put(
    '/experiment_descriptors/{experimentDescriptorId}/experimentDescriptor_archive_content',
    response_model=None,
    tags=['EaaS Experimentation Description Manager'],
)
def put_experiment_descriptors_experiment_descriptor_id_experiment_descriptor_archive_content(
    experiment_descriptor_id: str = Path(..., alias='experimentDescriptorId')
) -> None:
    """
    Upload Experiment Descriptor Archive
    """
    pass


@app.post(
    '/experiment_instances',
    response_model=None,
    responses={'201': {'model': ExperimentInstance}},
    tags=['EaaS Experimentation Lifecycle Manager'],
)
def post_experiment_instances(
    body: CreateExperimentRequest,
) -> Optional[ExperimentInstance]:
    """
    Create Experiment Identifier
    """
    pass


@app.post(
    '/experiment_instances/{experimentInstanceId}/instantiate',
    response_model=None,
    tags=['EaaS Experimentation Lifecycle Manager'],
)
def post_experiment_instances_experiment_instance_id_instantiate(
    experiment_instance_id: str = Path(..., alias='experimentInstanceId'),
    body: InstantiateExperimentRequest = ...,
) -> None:
    """
    Instantiate Experiment
    """
    pass


@app.post(
    '/experiment_instances/{experimentInstanceId}/terminate',
    response_model=None,
    tags=['EaaS Experimentation Lifecycle Manager'],
)
def post_experiment_instances_experiment_instance_id_terminate(
    experiment_instance_id: str = Path(..., alias='experimentInstanceId'),
    body: TerminateExperimentRequest = ...,
) -> None:
    """
    Terminate Experiment
    """
    pass


@app.post('/stop_application_instance', response_model=None, tags=['Southbound Plugin'])
def post_stop_application_instance(body: StopInstanceApplicationRequest) -> None:
    """
    Stop an application's instance
    """
    pass


@app.get(
    '/{instanceId}/state/ws',
    response_model=None,
    responses={'4XX': {'model': ProblemDetails}, '5XX': {'model': ProblemDetails}},
    tags=['Southbound Plugin'],
)
def get_instance_id_state_ws(
    instance_id: str = Path(..., alias='instanceId')
) -> Optional[ProblemDetails]:
    """
    Listen to instance state events
    """
    pass
